@import prelude
@import hashmap
@import math
@import test

;; Test let
(let ((x 1) (y (+ 1 1)))
	(expect! x 1 "x must be bound to 1")
	(expect! y 2 "y must be bound to 2"))

;; Test set!
(set! a 1)
(set! b (Î» () (print! *standard-output* "hello, world!")))
(expect! a 1 "a must be bound to 1")
(expect! (type b) "function" "b must be bound to a value with type of function")
(dont-expect! (eq? (type a) (type b)) true "a and b mustn't be the same type")

;; Test defn

(defn (add-and-sub a b c)
	(- (+ a b) c))

(expect! (type add-and-sub) "function" "add-and-sub must be bound to a function")
(expect! (add-and-sub 1 2 3) 0 "add-and-sub called with parameters 1, 2 and 3 must return 0")

;; Print results
(print-tests)

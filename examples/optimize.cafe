;; Should be removed
(defn (unused-func a b) (+ a b))

;; Should be removed
(with (unused-let "hello") ())

;; Should be removed
(def unused-def "Hello")

;; Everything but last should be removed
(let (
		(unused-constant 2)
		(unused-lambda (lambda (a b) (+ a b)))
		(unused-variable y)
		(unused-call (assert 2)))
		())

;; All should be used
(let (
	(a 2)
	(b a)
	(c (assert b)))
	())

;; All should be used
(let (
	(masked 2)
	(masked masked)
	(masked (assert masked)))
	())

;; b and c should be used
(let (
	(b a)
	(a 2) ;; Should be removed
	(c (assert (not b))))
	())


;; Masked arguments
(let (
	(masked-arg 2) ; Should be removed
	(func (lambda (masked-arg) masked-arg)))
	(func 2))


;; Nested do blocks
(print (do (do (do (do 2)))))

;; Basic constructs to check the compile
(print (if 1 (+ 2 3) (- 2 3)))
(with (x 0) (loop (<= x 3)
	(print x)
	(def x (+ x 1) :global)))
(cond '(1 2 3)
	([list|top:bottom|] (print top (describe bottom)))
	(_ (error "Expected list")))

;; Multiple values
(print (with ((a b) 2) 2)) ; Unused vars
(print (with ((a b) 2) a)) ; Single used var

(print (do (def (a b) 2) 2)) ; Unused vars
(print (do (def (a b) 2) a)) ; Single used var
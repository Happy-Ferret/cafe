(defmacro (defn* argsl &expr)
	(def ,[0:1]argsl (coroutine/wrap (λ (,[1:2]argsl) ,@expr))))

(defmacro (lambda* argsl &expr)
	(coroutine/wrap (λ (,argsl) ,@expr)))

(defmacro (yield val) (coroutine/yield ,val))


(defn (take-generator gen times)
	(with (ret '())
		(for i 1 times
			(push-tail! (gen) ret))
		ret))

(defn* (powers-of-2)
	(with (counter 0)
		(loop true
			(def counter (+ 1 counter) :global)
			(yield (^ 2 counter)))))

(for i 1 32
	(io.write (powers-of-2) " "))
(print)

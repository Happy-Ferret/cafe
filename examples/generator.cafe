(defmacro (defn* nam argsl &expr)
	(def ~nam (coroutine/wrap (λ (,argsl) ,expr))))

(defmacro (lambda* nam argsl &expr)
	(coroutine/wrap (λ (,argsl) ,expr)))

(defmacro (yield val) (coroutine/yield ,val))


(defn (take-generator gen times)
	(with (ret '())
		(for i 1 times
			(push-tail! (gen) ret))
		ret))

(defn* powers-of-2 ()
	(with (counter 1)
		(loop true
			(def counter (+ 1 counter) :global)
			(yield (^ 2 counter)))))

(for i 1 64
	(print (powers-of-2)))

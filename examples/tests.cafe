;;@import hashmap math test

;; Test let
(let ((x 1) (y (+ 1 1)))
	(tests/expect! x 1 "x should be bound to 1")
	(tests/expect! y 2 "y should be bound to 2"))

;; Test def
(def a 1)
(def b (位 () (print "hello, world!")))
(tests/expect! a 1 "a should be bound to 1")
(tests/expect! (type b) "function" "b should be bound to a value with type of function")
(tests/expect! (= (type a) (type b)) false "a and b shouldn't be the same type")

;; Test defn

(defn (add-and-sub a b c)
	(- (+ a b) c))

(tests/expect! (add-and-sub 1 2 3) 0 "add-and-sub called with parameters 1, 2 and 3 should return 0")
(tests/expect! (type add-and-sub) "function" "add-and-sub should be bound to a function")

;; Test basic list manipulation

(tests/expect! (map '(1 2 3) (位 ())) '() "mapping 位() over a list of numbers should return an empty list")
(tests/expect! (tail (1 . 2)) 2 "the tail of 1 . 2 should be 2")
(tests/expect! (head (1 . 2)) 1 "the head of 1 . 2 should be 1")
(tests/expect! (tail '(1 2 3)) (2 . 3) "the tail of 3 should be 2 . 3")
(tests/expect! (filter '(1 2 3 4) (位 (n) (= (% n 2) 0))) '(2 4) "filtering 4 for even numbers should be 2 . 4")
(tests/expect! (size '(1 2 3 4)) 4 "the size of '(1 2 3 4) should be 4")
(tests/expect! (take 2 '(1 2 3 4)) '(1 2) "taking the first 2 elements of '(1 2 3 4) should be 1 . 2")
(tests/expect! (head (take 1 '(1 2 3 4))) (head '(1 2 3 4)) "taking the first element of a list should be equivalent to taking the head of said list")
(tests/expect! (take 10 (map (curry (partial ^^ 2) int) (range 20))) '(2 4 8 16 32 64 128 256 512 1024) "taking the first 10 powers of two should be the 10 first powers of two")

;; Test tests

(tests/expect! (= 1 1) true "1 and 1 should be equivalent")
(tests/expect! (= 1 2) false "1 and 2 should not be equivalent")
(tests/expect! (list? '(1 2 3)) true "'(1 2 3) should be list")
(tests/expect! (pair? '(1 2 3)) false "'(1  2 3) should not be a pair")
(tests/expect! (pair? (1 . 2)) true "1 . 2 should be a pair")
(tests/expect! (= '(1 2) (1 . 2)) true "1 . 2 and '(1 2) should be equivalent")

;; Test some other standard library functions
(tests/expect! (id 1) 1 "the identity of 1 should be 1")
(tests/expect! (id id) id "the identity of the identity function should be the identity function")
(tests/expect! (id '(1 2 3)) '(1 2 3) "the identity of '(1 2 3) should be '(1 2 3)")

(tests/expect! (map (cut ^* 2 <>) '(1 2 3 4)) '(2 4 6 8) "mapping <> * 2 over '(1 2 3 4) should result in '(2 4 6 8)")

;; Various compilation challenges
(tests/expect! ((partial (lambda (x y) (^^ x y)) 2) 3) 8 "Partial application of a lambda")
(tests/expect! (id (if 1 2 3) 2) 2 "If statement in a function")
(tests/expect! (with (x 2) x x) 2 "Lone variable")
(tests/expect! (do 2 2) 2 "Lone constant")

;; Print results
(tests/print-tests)

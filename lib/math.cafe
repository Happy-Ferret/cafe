;;@doc math.md

(defn (math/rand l u) (math.random l u))
;; #### `rand-seed n`
;; Seed the random number generator with _n_
;; --
(defn (math/rand-seed n) (math.randomseed n))
;; #### `percent val tot`
;; Take the percentage of _val_ against _tot_
;; --
(defn (math/percent val total) (* 100 (/ val total)))
;; ### `mean ...`
;; Take the arithmetic mean of a set, given as variadic arguments.
;; --
(defn (math/mean ...)
	(let ((t {...}) (tot 0))
		(for i 1 (# t)
			(def tot (+ (nth i t) tot) :global))
		(/ tot #t)))

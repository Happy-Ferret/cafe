;;@doc hashmap.md
;; hash-map
;; ====
;; functions for manipulations of hash-maps.

;; ## Functions
;; ###### `hash-map/new [key value]*`
;; Create a new hash-map with keys and values given as variadic arguments.
;; Every two arguments constitutes a key:value pair.
;; --
(ns hash-map)

(defn (hash-map/new ...)
	(let ((l (list ...)) (ret (list)) (skip false))
		(for i 1 (# l)
			(if (not skip)
				(if (and (nth i l) (nth (+ 1 i) l))
					(lua-raw "ret[l[i]] = l[i + 1]; skip = true"))
				(def skip false :global)))
	(lua-raw "ret._type = 'hashmap'")
	ret))

;; ###### `hash-map/empty`
;; Create an empty hashmap.
;; --
(defn (hash-map/empty)
	(with (ret (list))
		(lua-raw "ret._type = 'hashmap'")
		ret))

;; ###### `hash-map/map map fun`
;; Map _fun_ over every value:key pair in the hash-map.
;; --
(defn (hash-map/map hm fun)
	(with (ret (hash-map/empty))
		(lua-raw "for k, v in pairs(hm) do")
			(if (!= (.k sub 1 1) "_")
				(lua-raw "ret[k] = fun(v, k)"))
		(lua-raw "end")
		ret))
;; ###### `hash-map/filter hm fun`
;; Filter the hash-map using _fun_.
;; --
(defn (hash-map/filter hm fun)
	(with (ret (hash-map/empty))
		(lua-raw "for k, v in pairs(hm) do")
			(if (!= (.k sub 1 1) "_")
				(lua-raw "ret[k] = fun(v, k)"))
		(lua-raw "end")
		ret))

;; ###### `hash-map/size hm`
;; Determine the size of _hm_
;; --
(defn (hash-map/size hm)
	(with (accum 0)
		(hash-map/map hm (Î» ()
			(def accum (+ 1 accum) :global)))
		accum))

;; ###### `hash-map/set k v` and `hash-map/get k v`
;; Set or get a key in a hash map
;; --
(defn (hash-map/set hm k v)
	(lua-raw "hm[k] = v"))

(defn (hash-map/get hm k v)
	(lua-raw "return hm[k] or v"))

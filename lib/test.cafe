(defn (_format_ fmt ...) (print (string/format fmt ...)))
;;@doc test.md
;; test
;; ====
;; simple, functional testing framework for café.
;; test operates on simple expected value . actual value comparisons, and classifies tests as 'failed' or 'passed'.
;; it also features a simple test results screen that displays
;; - passed test count (and percentage)
;; - failed test count (and percentage)
;; - description of all passed tests
;; - description, actual value and given value of all failed tests
;; --
;; test puts all functions in the namespace `tests/`.
(ns tests)

;; ## Functions
(let ((tests-failed (hash-map/empty)) (tests-passed (hash-map/empty)))
;; #### `tests/fail-test desc value expr`
;; internal use function for adding a test to the failed-tests list.
;; --
	(defn (tests/fail-test desc value expr)
		(hash-map/set tests-failed (string/format "%s: expected %s, got %s" (tostring desc) (tostring value) (tostring expr)) true))
;; #### `tests/fail-test desc value expr`
;; internal use function for adding a test to the passed-tests list.
;; --
	(defn (tests/pass-test desc value expr)
		(hash-map/set tests-passed (string/format "%s" (tostring desc) (tostring value) (tostring expr)) true))
;; #### `tests/print-tests`
;; print tests results as described in the opening paragraph
;; --
	(defn (tests/print-tests)
		(let ((num-tests (+ (hash-map/size tests-failed) (hash-map/size tests-passed))) (passed (hash-map/size tests-passed)) (failed (hash-map/size tests-failed)) (test-result-format "  \x1b[1;3%dm→\x1b[0m %s"))
			(_format_ "Test results: ")
			(_format_ "%d (%.2f%%) out of %d passed, %d (%.2f%%) failed." passed (math/percent passed num-tests) num-tests failed (math/percent failed num-tests))
			(_format_ "\027[1;32m- Passed tests:\027[0m (%d)" passed)
			(hash-map/map tests-passed (λ (_ desc)
				(_format_ test-result-format 2 desc)))

			(if (< 0 failed)
				(do
					(_format_ "\027[1;31m- Failed tests:\027[0m (%d)" failed)
					(hash-map/map tests-failed (λ (_ desc)
						(_format_ test-result-format 1 desc))))))))

;; #### `tests/expect! expr value desc`
;; Compare expected values and given values, then appropriately class the test as passed or failed.
;; --
(defn (tests/expect! expr value desc)
	(if (eq? value expr)
		(tests/pass-test desc value expr)
		(tests/fail-test desc value expr)))

(let ((tests-failed (hash-map/empty)) (tests-passed (hash-map/empty)))
	(defn (tests/fail-test desc value expr)
		(hash-map/set tests-failed (string.format "%s: expected %s, got %s" (tostring desc) (tostring value) (tostring expr)) true))
	(defn (tests/pass-test desc value expr)
		(hash-map/set tests-passed (string.format "%s" (tostring desc) (tostring value) (tostring expr)) true))
	(defn (tests/print-tests)
		(let ((num-tests (+ (hash-map/size tests-failed) (hash-map/size tests-passed))) (passed (hash-map/size tests-passed)) (failed (hash-map/size tests-failed)) (test-result-format "  \x1b[1;3%dm→\x1b[0m %s"))
			(format! "Test results: ")
			(format! "%d (%.2f%%) out of %d passed, %d (%.2f%%) failed." passed (math/percent passed num-tests) num-tests failed (math/percent failed num-tests))
			(format! "\027[1;32m- Passed tests:\027[0m (%d)" passed)
			(hash-map/map tests-passed (λ (_ desc)
				(format! test-result-format 2 desc)))

			(if (< 0 failed)
				(do
					(format! "\027[1;31m- Failed tests:\027[0m (%d)" failed)
					(hash-map/map tests-failed (λ (_ desc)
						(format! test-result-format 1 desc))))))))

(defn (tests/expect! expr value desc)
	(if (eq? value expr)
		(tests/pass-test desc value expr)
		(tests/fail-test desc value expr)))

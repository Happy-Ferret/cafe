@markdown-doc ./doc/prelude.md

;; prelude
;; =======
;; import this if you want anything to work
;; --

;; ## Symbols
;; ##### `*standard-output*`
;; global symbol bound to the stdout stream
(set! *standard-output* (io.output))

;; --
;; ## Functions

;; ##### `exists thing`
;; returns false if:
;; - thing is a table or a string and thing.length is 0
;; - thing is falsy (false, nil)
;;
;; if not, returns true.
;; --
(defn (exists? n)
	(if n
		(if (or (= (type n) "string") (= (type n) "table"))
			(if (= (# n) 0)
				false
				true)
			true)
		false))

;; ##### `exit-on-error! erfmt ...`
;; exits with a formatted error message and status code 1.
;; --
(defn (exit-with-error! erfmt ...)
	(print (string.format erfmt ...))
	(os.exit 1))

;; ##### `prompt pstr predicate?`
;; prompt the user for input, writing `pstr` before reading,
;; tests given input against `pred`, exiting with status
;; code -1 on failure.
;; --
(defn (prompt pchr pred)
	(io.write pchr)
	(let ((ret (io.read)))
		(if pred
			(if (not (pred ret))
				(exit-with-error! "Doesn't pass predicate!")
				ret)
			ret)))

;; ##### `print! stream string`
;; print a string to a stream
;; --
(defn (print! stream something)
	(let ((choose-stream (λ (s) (if s s (io.output)))))
		(let ((stream (choose-stream stream)))
			(.stream write something "\n"))))

;; ##### `print! stream fmtstr va_args`
;; print a formatted string to a stream
;; --
(defn (print-formatted! stream fmtstr ...)
	(print! stream (.fmtstr format ...)))

;; #### `format! fmtstr va_args`
;; print a formatted string to *standard-output* unconditionally
;; --
(defn (format! fmtstr ...)
	(print-formatted! *standard-output* fmtstr ...))

;; ##### `cons list elem`
;; cons an element in front of a list
;; --
(defn (cons list elem)
	(table.insert list 1 elem)
	list)

;; ##### `head list`
;; return the first element of a list
;; --
(defn (head list)
	list[1])

;; ##### `list`
;; create a list from given values
;; --
(defn (list ...) {...})


;; ##### `tail list`
;; return the rest of the list, without head
;; --
(defn (tail l)
	(let ((ret (list)))
		(for i 2 (# l)
			(cons ret list[i]))
		ret))

;; ##### `map list fn`
;; modify a list using a function, returning a new list
;; --
(defn (map li fn)
	(let ((ret (list)))
		(for i 1 (# li)
			(cons ret (fn li[i])))
		ret))

;; ##### `require! module`
;; require a Lua module into the current environment
;;
;; support for hot-compilation of café modules will be added at a later date.
(defn (require! module)
	(lua-raw "local ok, mod = pcall(require, module); if not ok then return false, 'no such module' .. module else for k, v in pairs(mod) do _G[string.format('__%s47%s__', module, k)] = v end end return mod"))
